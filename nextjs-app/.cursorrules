# Cursor Rules for LinkedIn Analytics App

## shadcn/ui Guidelines

### Component Usage
- **Always prefer shadcn/ui components** over custom HTML elements when available
- Use the following shadcn/ui components:
  - `Button` instead of `<button>` elements
  - `Card`, `CardContent`, `CardHeader`, `CardTitle` instead of custom card classes
  - `Badge` for status indicators and labels
  - `Input` for form inputs
  - `Separator` for dividers
  - `Sheet` for modals and overlays
  - `Sidebar` components for navigation
  - `Skeleton` for loading states
  - `Tooltip` for hover information

### Color Scheme
- Use the custom color variables defined in the project:
  - `--color-beige: #FAF9F5` (background accent)
  - `--color-primary: #157187` (main brand color)
  - `--color-secondary: #C4E5ED` (secondary accent)
- Apply colors using Tailwind classes: `bg-primary`, `text-primary`, `border-primary`
- Use `text-muted-foreground` for secondary text
- Use `text-destructive` for error states

### Layout Structure
- Use `SidebarProvider` and `SidebarInset` for main layout
- Implement responsive sidebar with `AppSidebarTrigger` for mobile
- Use `Card` components for content sections
- Apply consistent spacing with `gap-4`, `p-4`, `space-y-6`

### Component Migration
- Replace custom `.card` classes with shadcn/ui `Card` components
- Replace custom buttons with shadcn/ui `Button` components
- Use `Badge` components for status indicators
- Apply consistent styling with shadcn/ui design tokens

### Accessibility
- Maintain proper ARIA labels and roles
- Use semantic HTML structure
- Ensure keyboard navigation works properly
- Test with screen readers

### Code Organization
- Keep components in `/src/components/ui/` for shadcn/ui components
- Create custom components in `/src/components/` 
- Use proper imports: `import { Component } from '@/components/ui/component'`
- Follow React best practices for component composition

### Styling Guidelines
- Use Tailwind CSS classes with shadcn/ui design tokens
- Avoid custom CSS when shadcn/ui provides equivalent functionality
- Use `cn()` utility for conditional class names
- Maintain consistent spacing and typography

### Non-Breaking Changes
- When migrating components, create new versions alongside existing ones
- Use feature flags or conditional rendering to switch between old and new
- Ensure rollback capability by keeping original implementations
- Test thoroughly before removing legacy code

## Data Filtering Rules

### Post vs Reshare Analysis - CRITICAL RULE

**IMPORTANT: There is ONE exception to the data filtering rule in this application.**

#### The Rule:
1. **Post vs Reshare Chart** (TopTopicsChart.jsx / createActionMixChart):
   - Uses **ALL posts including reshares**
   - Shows the split between original posts and reshared content
   - Calculated in `action_share` and `action_counts` in csv-processor.js

2. **ALL OTHER Analysis** (everywhere else in the app):
   - Uses **ONLY original posts (excluding reshares)**
   - This includes:
     - Summary metrics (post count, engagement, active months, etc.)
     - Trends (posts per month, engagement over time)
     - Type distribution (text, video, image, etc.)
     - Timing insights and posting rhythm
     - Distribution analysis (day-wise, monthly)
     - LLM analysis (narrative insights, topic analysis, positioning, etc.)
     - Top posts
     - All other charts and metrics

#### Why This Matters:
- The Post vs Reshare Chart specifically needs to show the full picture of posting behavior
- All other analysis should focus on original content to provide accurate insights
- Reshared content doesn't reflect the user's original thought leadership

#### Implementation:
- Filtering happens in `csv-processor.js` at line ~133
- `originalPosts` variable contains filtered data for most analysis
- `posts` variable (all posts) is used ONLY for action distribution
- See detailed comments in csv-processor.js, chart-utils.js, and llm-functions.js

#### When Making Changes:
- Always check if your change affects post data filtering
- Maintain the distinction between `posts` (all) and `originalPosts` (filtered)
- Add comments if you're working with post data to clarify which dataset you're using
- Never accidentally use `posts` when you should use `originalPosts` or vice versa